@page "/EventNotify"
@using System.ComponentModel.DataAnnotations

<h1>在 Blazor 實作出透過綁定 DOM 事件來處理屬性變更需求</h1>

<EditForm Model="@MyPerson" OnValidSubmit="HandleValidSubmit">
    @*使用資料批註附加驗證支援*@
    <DataAnnotationsValidator />
    @*摘要說明驗證訊息。*@
    <ValidationSummary />

    <div class="form-group">
        <label for="FirstName">名</label>
        <InputText id="FirstName" class="form-control" @bind-Value="MyPerson.FirstName" />
        @*顯示特定欄位的驗證訊息，類似于驗證訊息標記協助程式。 使用 For 屬性指定驗證欄位，並以 lambda 運算式命名模型屬性*@
        <ValidationMessage For="@(()=>MyPerson.FirstName)" />
    </div>
    <div class="form-group">
        <label for="LastName">姓</label>
        <InputText id="LastName" class="form-control" @bind-Value="MyPerson.LastName" />
        <ValidationMessage For="@(()=>MyPerson.LastName)" />
    </div>
    <div class="form-group">
        <label for="Age">年紀</label>
        @*底下的宣告，將會造成 onchange 綁定的方法，永遠無法被觸發
        因為，瀏覽器的開發人員工具之主控台中，出現底下錯誤：
        Error: System.ArgumentException: Object of type
        'Microsoft.AspNetCore.Components.ChangeEventArgs'
        cannot be converted to type 'System.Int32'*@
        @*<InputNumber id="Age" class="form-control"
        @bind-Value="MyPerson.Age" @bind-Value:event="oninput"
        @onchange="@(()=>AgeChanged())" />*@

        @*底下的宣告，將會造成 onchange 綁定的方法，永遠無法被觸發*@
        @*<InputNumber id="Age" class="form-control"
        @bind-Value="MyPerson.Age"
        @onchange="AgeChanged" />*@

        @*底下的宣告，將會造成底下錯誤訊息*@
        @*The component parameter 'oninput' is used two or more times for this component.
        Parameters must be unique (case-insensitive).
        The component parameter 'oninput' is generated by the '@bind-Value' directive attribute.*@
        @*<InputNumber id="Age" class="form-control"
        @bind-Value="MyPerson.Age" @bind-Value:event="oninput"
        @oninput="@((x)=>AgeChanged())" />*@


        @*這裡是使用 Blazor 內建 InputNumber 標籤來做到屬性變更的偵測與觸發*@
        <InputNumber id="Age" class="form-control" @bind-Value="@MyPerson.Age"
                     @oninput="@((e) => OnAgeChangedByEventArgs(e))" />


        @*----------------------------------------------------------*@
        @*底下這兩種方法，都是可行的*@
        @*----------------------------------------------------------*@

        @*這裡是使用 HTML input 標籤來做到屬性變更的偵測與觸發*@
        @*<input type="number" id="Age" class="form-control" value="@MyPerson.Age"
        @onchange="@(x=>OnAgeChangedByEventArgs(x))" />*@
        @*<input type="number" id="Age" class="form-control" value="@MyPerson.Age"
        @oninput="@(x=>OnAgeChangedByEventArgs(x))" />*@
    </div>

    <button type="submit" class="btn btn-primary" disabled="@IsDisabled">Submit</button>

</EditForm>

<div class="text-danger">
    @AgeRange
</div>

@code{
    class Person
    {
        [Required(ErrorMessage = "欄位 名，不可為空白")]
        public string FirstName { get; set; }
        [Required(ErrorMessage = "欄位 姓，不可為空白")]
        public string LastName { get; set; }
        [Range(0, 99, ErrorMessage = "年紀數值不正確")]
        public int Age { get; set; }
    }

    Person MyPerson = new Person();
    bool IsDisabled = true;
    string AgeRange = "";

    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    void OnAgeChangedByEventArgs(ChangeEventArgs e)
    {
        MyPerson.Age = Convert.ToInt32(e.Value);
        AgeChanged();
    }
    void AgeChanged()
    {
        if (MyPerson.Age < 13)
        {
            AgeRange = "你是小朋友";
            IsDisabled = true;
        }
        else if (MyPerson.Age < 20)
        {
            AgeRange = "你是年青人";
            IsDisabled = false;
        }
        else if (MyPerson.Age < 28)
        {
            AgeRange = "你是青年人";
            IsDisabled = false;
        }
        else
        {
            AgeRange = "你是成年人";
            IsDisabled = false;
        }
        StateHasChanged();
    }
}