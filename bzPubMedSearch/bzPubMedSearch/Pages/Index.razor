@page "/"
@using System.Linq;

<div>
    @QueryCondition
</div>

@foreach (var item in ConditionBuilderItems)
{
    <div class="row" style="padding-top:10px">

        <div class="col-md-1">
            @if (item.ShowLogical == true)
            {
                <select class="form-control"
                        value="@item.AndOrLogical"
                        @onchange="(x)=>AndOrLogicalSelectChanged(x, item)">
                    <option value="And" selected>And</option>
                    <option value="Or">Or</option>
                </select>
            }
        </div>

        <div class="col-md-2">
            <select class="form-control" size="1"
                    value="@item.FieldName"
                    @onchange="(x)=>FieldNameSelectChanged(x, item)">
                <option value=" ">All Fields</option>
                @foreach (var country in FieldNameItems)
                {
                    <option value="@country.FieldName">@country.FieldName</option>
                }
            </select>
        </div>

        <div class="col-md-7">
            <input class="form-control"
                   @onkeypress="async (x) => await RefreshInputAsync()"
                   @bind-value="@item.FieldValue"
                   @bind-value:event="oninput" />
        </div>
        <div class="col-md-2">
            @if (item.ShowRemoveCondition == true)
            {
                <button class="btn-danger" @onclick="()=>OnRemoveCondition(item)"> - </button>
            }
            @if (item.ShowAddCondition == true)
            {
                <button class="btn-primary" @onclick="()=>OnAddCondition(item)"> + </button>
            }
        </div>
    </div>
}
<select value="@SelectedYear" @onchange="ChangeYear">
    @for (int i = 2015; i < DateTime.Now.Year + 1; i++)
    {
        <option value="@i">A @i</option>
    }
</select>

@code{
    private int SelectedYear { get; set; } = 2018;

    void ChangeYear(ChangeEventArgs e)
    {
        SelectedYear = Convert.ToInt32(e.Value.ToString());

    }


    [Parameter]
    public string QueryCondition { get; set; } = "";
    #region 相關類別定義
    public class ConditionBuilderItem
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public bool ShowLogical { get; set; } = true;
        public string AndOrLogical { get; set; } = "And";
        public string FieldName { get; set; } = " ";
        public string FieldValue { get; set; } = "";
        public bool ShowAddCondition { get; set; } = true;
        public bool ShowRemoveCondition { get; set; } = true;
    }
    public class FieldNameItem
    {
        public string FieldName { get; set; }
    }
    public List<FieldNameItem> FieldNameItems { get; set; } = new List<FieldNameItem>()
{
        new FieldNameItem(){ FieldName="Author"},
        new FieldNameItem(){ FieldName="Author - Corporate"},
        new FieldNameItem(){ FieldName="Author - First"},
        new FieldNameItem(){ FieldName="Full"},
        new FieldNameItem(){ FieldName="Book"},
        new FieldNameItem(){ FieldName="Date - Create"},
    };
    public List<ConditionBuilderItem> ConditionBuilderItems { get; set; } = new List<ConditionBuilderItem>()
    {

    };
    #endregion
    protected override void OnInitialized()
    {
        ConditionBuilderItems.Add(new ConditionBuilderItem());
        ConditionBuilderItems.Add(new ConditionBuilderItem());
        Refresh();
    }

    void AndOrLogicalSelectChanged(ChangeEventArgs e, ConditionBuilderItem item)
    {
        item.AndOrLogical = e.Value.ToString();
        Refresh();
    }
    void FieldNameSelectChanged(ChangeEventArgs e, ConditionBuilderItem item)
    {
        item.FieldName = e.Value.ToString();
        Refresh();
    }

    async Task RefreshInputAsync()
    {
        RefreshWhetherShowCommandButton();
        var itemLast = ConditionBuilderItems.Last();

        // 若沒有暫緩休息一下，則無法取得最新輸入的內容
        await Task.Delay(50);

        #region 若輸入的查詢條件內容是最後一筆，判斷是否要新增一筆空白查詢條件
        if (!string.IsNullOrWhiteSpace(itemLast.FieldValue))
        {
            ConditionBuilderItems.Add(new ConditionBuilderItem() { });
        }
        #endregion
        RebuildConditionString();
    }

    void RebuildConditionString()
    {
        QueryCondition = "";
        foreach (var item in ConditionBuilderItems)
        {
            if (item.FieldValue.Trim() == "")
            {
                continue;
            }
            if (QueryCondition != "")
            {
                QueryCondition = $"({QueryCondition}) {item.AndOrLogical} ";
            }

            if (item.FieldName.Trim() == "")
            {
                QueryCondition = QueryCondition + item.FieldValue;
            }
            else
            {
                QueryCondition = QueryCondition + $"{item.FieldValue}[{item.FieldName}]";
            }
        }
    }

    void Refresh()
    {
        RefreshWhetherShowCommandButton();
        RebuildConditionString();
        StateHasChanged();
    }

    void RefreshWhetherShowCommandButton()
    {
        // 第一筆查詢條件的查詢邏輯控制項，不要顯示出來
        ConditionBuilderItems[0].ShowLogical = false;
        if (ConditionBuilderItems.Count == 1)
        {
            #region 若僅有一筆查詢條件，僅顯示可以新增查詢條件按鈕
            ConditionBuilderItems[0].ShowRemoveCondition = false;
            ConditionBuilderItems[0].ShowAddCondition = true;
            ConditionBuilderItems[0].ShowLogical = false;
            return;
            #endregion
        }
        else
        {
            bool first = false;
            foreach (var item in ConditionBuilderItems)
            {
                if (first == false)
                {
                    first = true;
                    #region 若有兩筆以上查詢條件，第一筆的查詢條件 新增與刪除按鈕要更新是否顯示出來
                    item.ShowRemoveCondition = true;
                    item.ShowAddCondition = false;
                    item.ShowLogical = false;
                    #endregion
                }
                else
                {
                    item.ShowLogical = true;
                    item.ShowAddCondition = false;
                    item.ShowRemoveCondition = true;
                }
            }
            ConditionBuilderItems.Last().ShowAddCondition = true;
        }
    }

    void OnRemoveCondition(ConditionBuilderItem conditionBuilderItem)
    {
        var item = ConditionBuilderItems.FirstOrDefault(x => x.Id == conditionBuilderItem.Id);
        if (item != null)
        {
            ConditionBuilderItems.Remove(item);
        }
        Refresh();
    }

    void OnAddCondition(ConditionBuilderItem conditionBuilderItem)
    {
        var item = ConditionBuilderItems.FirstOrDefault(x => x.Id == conditionBuilderItem.Id);
        if (item != null)
        {
            int idx = ConditionBuilderItems.IndexOf(item) + 1;
            ConditionBuilderItems.Insert(idx, new ConditionBuilderItem() { });
        }
        Refresh();
    }
}
